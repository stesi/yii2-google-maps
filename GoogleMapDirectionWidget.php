<?php

namespace stesi\googlemaps;

use yii\base\Widget;
use Yii;
use yii\base\Model;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\helpers\Json;
use yii\web\JsExpression;
use yii\widgets\InputWidget;


/**
 * Class GoogleMapDirectionWidget
 * @package stesi\googlemaps
 */

class GoogleMapDirectionWidget extends Widget
{
    public $coords;

    /**
     * @var array options for map wrapper div
     */
    public $wrapperOptions;

    /**
     * @var array options for attribute text input
     */
    public $textOptions = ['class' => 'form-control'];

    /**
     * @var array JavaScript options
     */
    public $jsOptions = [];

    /**
     * @var callable function for custom map render
     */
    public $renderWidgetMap;

    /**
     * @var string Google API Key for Google Maps
     */
    public $googleMapApiKey;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->id = uniqid('map_');


    }

    /**
     * Run widget
     */
    public function run()
    {


        parent::run();

        if (!isset($this->wrapperOptions)) {
            $this->wrapperOptions = [];
        }
        if (!isset($this->wrapperOptions['id'])) {
            $this->wrapperOptions['id'] = $this->id;
        }
        if (!isset($this->wrapperOptions['style'])) {
            $this->wrapperOptions['style'] = 'width: 100%; height: 500px;';
        }

        // getting inputs ids


        $jsOptions = ArrayHelper::merge($this->jsOptions, ['coords' => $this->coords]);
        // message about not founded addess
        if (!isset($jsOptions['addressNotFound'])) {
            $hasMainCategory = isset(Yii::$app->i18n->translations['*']) || isset(Yii::$app->i18n->translations['main']);
            $jsOptions['addressNotFound'] = $hasMainCategory ? Yii::t('main', 'Address not found') : 'Address not found';
        }
        $this->view->registerJs(new JsExpression('
            
           setTimeout(function(){
                $(\'#' . $this->wrapperOptions['id'] . '\').directionMap(' . Json::encode($jsOptions) . ');},1000);
           
        '));
        $mapHtml = Html::tag('div', '', $this->wrapperOptions);


        return  $mapHtml;
    }
}
